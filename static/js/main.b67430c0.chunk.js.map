{"version":3,"sources":["Button/Button.tsx","Counter/Counter.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Button","props","className","onClick","disabled","title","Counter","counterState","style","marginTop","changeCounterState","resetCounterState","App","useState","setCounterState","setDisabled","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"gMASaA,EAAoC,SAACC,GAC9C,OACI,8BACI,wBAAQC,UAAWD,EAAMC,UAAWC,QAASF,EAAME,QAASC,SAAUH,EAAMG,SAA5E,SAAuFH,EAAMI,WCFlG,SAASC,EAAQL,GAEpB,OACI,gCACI,qBAAKC,UAAU,UAAf,SACI,qBAAKA,UAJS,IAIED,EAAMM,aAAqC,mBAAqB,IAC3EC,MAAO,CAACC,UAAW,QADxB,SACkCR,EAAMM,iBAE5C,qBAAKL,UAAU,eAAf,SACI,sBAAKA,UAAU,iBAAf,UACI,cAAC,EAAD,CAAQG,MAAO,MAAOH,UAAW,aAAcE,SATrC,IAS+CH,EAAMM,aAAoCJ,QAASF,EAAMS,qBAClH,cAAC,EAAD,CAAQL,MAAO,QAASH,UAAW,eAAgBE,SAAUH,EAAMG,SAAUD,QAASF,EAAMU,4BCMjGC,MAvBf,WAAgB,IAAD,EAC2BC,mBAAiB,GAD5C,mBACNN,EADM,KACQO,EADR,OAEmBD,oBAAkB,GAFrC,mBAENT,EAFM,KAEIW,EAFJ,KAaX,OACI,qBAAKb,UAAU,MAAf,SACI,cAACI,EAAD,CAASI,mBAXU,WACvBI,IAAkBP,GAClBQ,GAAY,IAUCR,aAAcA,EACdH,SAAUA,EACVO,kBATS,WACtBG,EAAgB,GAChBC,GAAY,SCDLC,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,K","file":"static/js/main.b67430c0.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\ntype ButtonPropsType = {\r\n    title: string;\r\n    className: string;\r\n    disabled: boolean;\r\n    onClick: () => void;\r\n}\r\n\r\nexport const Button: React.FC<ButtonPropsType> = (props) => {\r\n    return (\r\n        <div>\r\n            <button className={props.className} onClick={props.onClick} disabled={props.disabled}>{props.title}</button>\r\n        </div>\r\n    )\r\n}","import React from \"react\";\r\nimport {Button} from \"../Button/Button\";\r\n\r\ntype CounterPropsType = {\r\n    counterState: number;\r\n    disabled: boolean;\r\n    changeCounterState: () => void;\r\n    resetCounterState: () => void;\r\n}\r\n\r\nexport function Counter(props: CounterPropsType) {\r\n    const MAX_COUNTER_VALUE = 5;\r\n    return (\r\n        <div>\r\n            <div className=\"counter\">\r\n                <div className={props.counterState === MAX_COUNTER_VALUE ? \"counter-disabled\" : \" \"}\r\n                     style={{marginTop: \"35px\"}}>{props.counterState}</div>\r\n            </div>\r\n            <div className=\"block-button\">\r\n                <div className=\"button-counter\">\r\n                    <Button title={'inc'} className={'button-inc'} disabled={props.counterState === MAX_COUNTER_VALUE} onClick={props.changeCounterState} />\r\n                    <Button title={'reset'} className={'button-reset'} disabled={props.disabled} onClick={props.resetCounterState}/>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n","import React, {useState} from 'react';\nimport './App.css';\nimport {Counter} from \"./Counter/Counter\";\n\nfunction App() {\n    let [counterState, setCounterState] = useState<number>(0)\n    let [disabled, setDisabled] = useState<boolean>(true)\n\n    const changeCounterState = () => {\n        setCounterState(++counterState)\n        setDisabled(false)\n    }\n\n    const resetCounterState = () => {\n        setCounterState(0)\n        setDisabled(true)\n    }\n    return (\n        <div className=\"App\">\n            <Counter changeCounterState={changeCounterState}\n                     counterState={counterState}\n                     disabled={disabled}\n                     resetCounterState={resetCounterState}/>\n        </div>\n    );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}